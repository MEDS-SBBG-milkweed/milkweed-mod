---
title: "Cleaning Trails & Roads Data"
---

## Setup

Load required packages

```{r}
library(tidyverse)
library(here)
library(janitor)
library(sf)
library(terra)
library(stars)
```


Read in LPNF Boundary Shapefiles
```{r}
# ------ LPNF boundary shapefiles ---------
# Southern region (buffered)
lpnf_boundary_south <- st_read(here("~/../../capstone/milkweedmod/clean_data/lpnf_boundary/lpnf_boundary_south_buffered/lpnf_boundary_south_buffered.shp"))

# Northern region (buffered)
lpnf_boundary_north <- st_read(here("~/../../capstone/milkweedmod/clean_data/lpnf_boundary/lpnf_boundary_north_buffered/lpnf_boundary_north_buffered.shp")) 
```


Read in Raw data from Forest Watch and USGS

```{r}
# ------------ Forest Watch ----------------
# this data is only from the southern region

# read in LPNF trails data 
trails_and_roads <- st_read(here("~/../../capstone/milkweedmod/raw_data/trails_and_roads/2023_Regional_Trails_and_Roads_lines/2023_Regional_Trails_and_Roads_lines.shp"))


# ----------- USGS ------------------------

# Trails
usgs_trails <- st_read("~/../../capstone/milkweedmod/raw_data/trails_and_roads/CA_transportation/Trans_TrailSegment.shp")


# Roads
usgs_roads_0 <- st_read("~/../../capstone/milkweedmod/raw_data/trails_and_roads/CA_transportation/Trans_RoadSegment_0.shp")
usgs_roads_1 <- st_read("~/../../capstone/milkweedmod/raw_data/trails_and_roads/CA_transportation/Trans_RoadSegment_1.shp")
# this layer ends up not being in either the northern or southern sections
usgs_roads_2 <- st_read("~/../../capstone/milkweedmod/raw_data/trails_and_roads/CA_transportation/Trans_RoadSegment_2.shp")
usgs_roads_3 <- st_read("~/../../capstone/milkweedmod/raw_data/trails_and_roads/CA_transportation/Trans_RoadSegment_3.shp")
usgs_roads_4 <- st_read("~/../../capstone/milkweedmod/raw_data/trails_and_roads/CA_transportation/Trans_RoadSegment_4.shp")


```



## Tidy & Clean Data

### Forest Watch

```{r}
# tidy column names
# select relevant columns
# reproject to same CRS as (EPSG 4326)
fw_trails_roads_clean <- trails_and_roads %>% 
  janitor::clean_names() %>% # sets col names to lower_snake_case
  dplyr::select(type, public_acc, geometry) %>% # select columns of interest
  st_zm() %>% # remove z-dimension (we only want 2D)
  st_transform(crs = st_crs(lpnf_boundary_south))

# note: we don't need to crop these since they are already to the extent of the southern region of the forest

# make distinct trails and roads subsets to save as clean .shp files
fw_trails <- fw_trails_roads_clean %>% 
  dplyr::filter(type == "Trail")

fw_roads <- fw_trails_roads_clean %>% 
  dplyr::filter(type == "Road")

# Filter to "OPEN" roads and trails (note: running this should appropriately update open vs closed status when there is new data from Forest Watch)

# Filter to OPEN Trails
open_trails <- fw_trails %>% 
  dplyr::filter(str_detect(public_acc, pattern = "OPEN"))

# Filter to OPEN Roads
open_roads <- fw_roads %>% 
  dplyr::filter(str_detect(public_acc, pattern = "OPEN"))

# Save to clean_data folder in data directory
# write files to clean_data folder ----
# uncomment the following lines to write the data to the clean data folder
# st_write(open_trails, "~/../../capstone/milkweedmod/clean_data/trails_and_roads/forest_watch/forest_open_trails_south.shp")

# st_write(open_roads, "~/../../capstone/milkweedmod/clean_data/trails_and_roads/forest_watch/forest_open_roads_south.shp")

```

## USGS

### Trails

Here we'll reproject the USGS trails data to EPSG 4326 (to match the LPNF boundary CRS), clean/tidy the data, crop it to the northern LPNF boundary, and save the output (write to `clean_data` folder in data repository)

```{r usgs-trails-north}
# North: Trails

print("The CRS of the LPNF Boundary and the USGS Trails data match:")
st_crs(lpnf_boundary_north) == st_crs(usgs_trails)

# We'll need to reproject and clean/tidy our data before moving forward!

# Clean & tidy ----
usgs_trails_clean <- usgs_trails %>% 
  st_transform(crs = st_crs(lpnf_boundary_south)) %>% # reproject (EPSG 4326)
  janitor::clean_names() %>% # set column names to lower_snake_case
  dplyr::mutate(trail = 1) %>%  # add column of 1s for plotting
  dplyr::select(trail, geometry) # keep just these column for plotting


# Crop to northern LPNF boundary ----
usgs_trails_north <- usgs_trails_clean %>% 
  st_intersection(lpnf_boundary_north) %>%  # does not preserve geometries (cuts off trails at the boundary instead of fully removing any trails that go outside of the boundary)
  dplyr::select(-FID) # remove this column

# optional: plot to see output ----
# ggplot() +
#   geom_sf(data = usgs_trails_north, color = "black") +
#   geom_sf(data = lpnf_boundary_north, color = "forestgreen", fill = "transparent", linewidth = 1.5) +
#   theme_classic()

# Save output to clean_data folder ----
#st_write(usgs_trails_north, "~/../../capstone/milkweedmod/clean_data/trails_and_roads/usgs/usgs_trails_north.shp",
 #        append = FALSE) # replace existing file that shares the same name (if appropriate)
```

### Roads

Here we'll bind all rows from the 5 USGS roads datasets, reproject to EPSG 4326 (to match the LPNF boundary CRS), clean/tidy the data, crop it to the northern LPNF boundary, and save the output (write to `clean_data` folder in data repository)


```{r usgs-roads-north}
# North: Roads

# combine data into one df with rbind (doing this step may take a few minutes, as these have 550 thousand rows each)
usgs_roads <- rbind(usgs_roads_0, usgs_roads_1, usgs_roads_2, usgs_roads_3, usgs_roads_4)


print("The CRS of the LPNF Boundary and the USGS Roads data match:")
st_crs(lpnf_boundary_north) == st_crs(usgs_roads)

# We'll need to reproject and clean/tidy our data before cropping to the northern LPNF boundary!

# Clean & tidy ----
# this step may also take a few minutes
usgs_roads_clean <- usgs_roads %>% 
  st_transform(crs = st_crs(lpnf_boundary_north)) %>%
  janitor::clean_names() %>%
  dplyr::mutate(road = 1) %>%  # add column of 1s for plotting
  dplyr::select(road, geometry) # keep just this column (and geometries) for plotting



# Crop to northern LPNF boundary ----
# this step takes the longest (up to several minutes depending on your computing power)
usgs_roads_north <- usgs_roads_clean %>% 
  st_intersection(lpnf_boundary_north) %>%  # crop to northern LPNF boundary
  dplyr::select(-FID) # remove irrelevant column


# optional: plot to see output ----
# ggplot() +
#   geom_sf(data = usgs_roads_north, color = "black") +
#   geom_sf(data = lpnf_boundary_north, color = "forestgreen", fill = "transparent", linewidth = 1.5) +
#   theme_classic()

# Save output to clean_data folder ----
# st_write(usgs_roads_north, "~/../../capstone/milkweedmod/clean_data/trails_and_roads/usgs/usgs_roads_north.shp",
#         append = FALSE) # replace existing file that shares the same name (if appropriate)


```

 


### Forest Watch

Write output from Forest Watch to `clean_data` folder

```{r}

# write files to clean_data folder ----
# st_write(fw_trails, "~/../../capstone/milkweedmod/clean_data/trails_roads/forest_watch/forest_trails_south.shp")

#st_write(fw_roads, "~/../../capstone/milkweedmod/clean_data/trails_roads/forest_watch/forest_roads_south.shp")

```


### USGS

```{r}



```

