---
title: "Cleaning Trails & Roads Data"
date: "2024-04-24"
---

This notebook selects trails and roads within the LPNF boundary and provides code to filter out specific trails/roads based on name and/or open/closed status in the southern section of the forest.

## Setup

### Load required packages

```{r}
library(tidyverse)
library(here)
library(janitor)
library(sf)
library(terra)
library(stars)
```


### Read in LPNF Boundary Shapefiles
```{r}
# ------ LPNF boundary shapefiles ---------
# Southern region (buffered)
lpnf_boundary_south <- st_read(here("~/../../capstone/milkweedmod/clean_data/lpnf_boundary/lpnf_boundary_south_buffered/lpnf_boundary_south_buffered.shp"))

# Northern region (buffered)
lpnf_boundary_north <- st_read(here("~/../../capstone/milkweedmod/clean_data/lpnf_boundary/lpnf_boundary_north_buffered/lpnf_boundary_north_buffered.shp")) 
```


### Read in raw data from Forest Watch and USGS

```{r}
# ------------ Forest Watch ----------------
# this data is only from the southern region

# read in LPNF trails data 
trails_and_roads <- st_read(here("~/../../capstone/milkweedmod/raw_data/trails_and_roads/2023_Regional_Trails_and_Roads_lines/2023_Regional_Trails_and_Roads_lines.shp"))


# ----------- USGS ------------------------

# Trails
usgs_trails <- st_read("~/../../capstone/milkweedmod/raw_data/trails_and_roads/CA_transportation/Trans_TrailSegment.shp")


# Roads
usgs_roads_0 <- st_read("~/../../capstone/milkweedmod/raw_data/trails_and_roads/CA_transportation/Trans_RoadSegment_0.shp")
usgs_roads_1 <- st_read("~/../../capstone/milkweedmod/raw_data/trails_and_roads/CA_transportation/Trans_RoadSegment_1.shp")
# this layer ends up not being in either the northern or southern sections, but I'm including it in case this data is updated and re-downloaded
usgs_roads_2 <- st_read("~/../../capstone/milkweedmod/raw_data/trails_and_roads/CA_transportation/Trans_RoadSegment_2.shp")
usgs_roads_3 <- st_read("~/../../capstone/milkweedmod/raw_data/trails_and_roads/CA_transportation/Trans_RoadSegment_3.shp")
usgs_roads_4 <- st_read("~/../../capstone/milkweedmod/raw_data/trails_and_roads/CA_transportation/Trans_RoadSegment_4.shp")


```



## Forest Watch

### Tidy, Clean, Filter & Save

Tidy, clean, and filter the Forest Watch trails and roads data, then save the output to the `clean_data` folder.


Note: Add in a way to filter out trails and roads by names (input would be a list of trails, roads, marked as "closed" from some other data source.)

```{r}
# tidy column names
# select relevant columns
# reproject to same CRS as (EPSG 4326)
fw_trails_roads_clean <- trails_and_roads %>% 
  janitor::clean_names() %>% # sets col names to lower_snake_case
  dplyr::select(type, public_acc, geometry) %>% # select columns of interest
  st_zm() %>% # remove z-dimension (we only want 2D)
  st_transform(crs = st_crs(lpnf_boundary_south))

# note: we don't need to crop these since they are already to the extent of the southern region of the forest

# make distinct trails and roads subsets to save as clean .shp files
fw_trails <- fw_trails_roads_clean %>% 
  dplyr::filter(type == "Trail")

fw_roads <- fw_trails_roads_clean %>% 
  dplyr::filter(type == "Road")

# Filter to "OPEN" roads and trails (note: running this should appropriately update open vs closed status when there is new data from Forest Watch)

# Filter to OPEN Trails
open_trails <- fw_trails %>% 
  dplyr::filter(str_detect(public_acc, pattern = "OPEN"))

# Filter to OPEN Roads
open_roads <- fw_roads %>% 
  dplyr::filter(str_detect(public_acc, pattern = "OPEN"))

# Save to clean_data folder in data directory
# write files to clean_data folder ----
# uncomment the following lines to write the data to the clean data folder

# st_write(open_trails, "~/../../capstone/milkweedmod/clean_data/trails_and_roads/forest_watch/forest_open_trails_south.shp")

# st_write(open_roads, "~/../../capstone/milkweedmod/clean_data/trails_and_roads/forest_watch/forest_open_roads_south.shp")


# optionally, if you want to use all trails and roads regardless of "OPEN" vs "CLOSED" status:
# write files to clean_data folder ----
# st_write(fw_trails, "~/../../capstone/milkweedmod/clean_data/trails_roads/forest_watch/forest_trails_south.shp")

#st_write(fw_roads, "~/../../capstone/milkweedmod/clean_data/trails_roads/forest_watch/forest_roads_south.shp")
```

#### *Requested filtering option:* Filter out specific trails and roads by name

(i.e., you have a name of a trail or road that you know is closed and would like to filter them out)

For example, let's say I checked out this website: [Forest Service: Monterey Ranger District](https://www.fs.usda.gov/detail/lpnf/recreation/?cid=stelprdb5347980) and saw that "Pine Ridge Trail" and "Happy Hollow Trail" were closed, you'd think I'd just be able to filter out these names from the Trail and Road subsets I've already made, right? Unfortunately, the Forest Watch has classified Happy Hollow Trail as Type == "Road". This means that filtering out "Happy Hollow Trail" from the Trails subset would not accomplish what we're hoping it would. 

Thus, for this special filtering case, I've built out a workflow below to filter out specific names, *then* break down the dataset in to Trails and Roads, then filter for "OPEN" status (which is optional), and save the output. This will all be commented out and the code chunk will be set to eval=FALSE. You can individually uncomment lines by deleting the "#", or bulk-uncomment by pressing: command (or control, for Windows users) + shift + C (note: you can find RStudio keyboard shortcuts in Tools --> Keyboard Shortcuts Help).



```{r filter-names, eval=FALSE}
# # Filter out specific roads or trails by NAME (i.e., you have a name of a trail or road that you know is closed and would like to filter them out)
# 
# # filter to "OPEN" AND filter OUT specific name(s):
# filtered_trails_roads <- trails_and_roads %>% 
#   janitor::clean_names() %>% # sets col names to lower_snake_case
#   dplyr::select(type, public_acc, geometry) %>% # select columns of interest
#   st_zm() %>% # remove z-dimension (we only want 2D)
#   st_transform(crs = st_crs(lpnf_boundary_south)) %>% 
#   dplyr::filter(! name %in% c("Trail name", "Another trail name")) # CUSTOM NAME FILTERING HERE
# 
# # Make subsets for Trails....
# filtered_trails <- filtered_trails_roads %>% 
#   dplyr::filter(type == "Trail")
# # and Roads
# filtered_roads <- filtered_trails_roads %>% 
#   dplyr::filter(type == "Road")
# 
# 
# # Additionally, you can filter out all trails and roads that were not classified as "OPEN" when this dataset was made (in 2023)
# 
# # Filter to OPEN Trails
# my_open_trails <- filtered_trails %>% 
#   dplyr::filter(str_detect(public_acc, pattern = "OPEN"))
# 
# # Filter to OPEN Roads
# my_open_roads <- filtered_roads %>% 
#   dplyr::filter(str_detect(public_acc, pattern = "OPEN"))
# 
# 
# # Save to clean_data folder in data directory
# # write files to clean_data folder ----
# # uncomment the following lines to write the data to the clean data folder
# 
# # st_write(my_open_trails, "~/../../capstone/milkweedmod/clean_data/trails_and_roads/forest_watch/forest_open_trails_south.shp")
# 
# # st_write(my_open_roads, "~/../../capstone/milkweedmod/clean_data/trails_and_roads/forest_watch/forest_open_roads_south.shp") # feel free to change the name of this file to something else if you're testing out multiple filter scenarios. Just make sure that you read in the appropriate file later on (i.e., before running the accessibility index setup script (scripts/accessibility_setup.R) or site_accessibility/rescale_all_layers.qmd or site_accessibility/create_accessibility_index.qmd)

```


## USGS

### Trails

Here we'll reproject the USGS trails data to EPSG 4326 (to match the LPNF boundary CRS), clean/tidy the data, crop it to the northern LPNF boundary, and save the output (write to `clean_data` folder in data repository)

```{r usgs-trails-north}
# North: Trails

print("The CRS of the LPNF Boundary and the USGS Trails data match:")
st_crs(lpnf_boundary_north) == st_crs(usgs_trails)

# We'll need to reproject and clean/tidy our data before moving forward!

# Clean & tidy ----
usgs_trails_clean <- usgs_trails %>% 
  st_transform(crs = st_crs(lpnf_boundary_south)) %>% # reproject (EPSG 4326)
  janitor::clean_names() %>% # set column names to lower_snake_case
  dplyr::mutate(trail = 1) %>%  # add column of 1s for plotting
  dplyr::select(trail, geometry) # keep just these column for plotting


# Crop to northern LPNF boundary ----
usgs_trails_north <- usgs_trails_clean %>% 
  st_intersection(lpnf_boundary_north) %>%  # does not preserve geometries (cuts off trails at the boundary instead of fully removing any trails that go outside of the boundary)
  dplyr::select(-FID) # remove this column

# optional: plot to see output ----
# ggplot() +
#   geom_sf(data = usgs_trails_north, color = "black") +
#   geom_sf(data = lpnf_boundary_north, color = "forestgreen", fill = "transparent", linewidth = 1.5) +
#   theme_classic()

# Save output to clean_data folder ----
#st_write(usgs_trails_north, "~/../../capstone/milkweedmod/clean_data/trails_and_roads/usgs/usgs_trails_north.shp",
 #        append = FALSE) # replace existing file that shares the same name (if appropriate)
```

### Roads

Here we'll bind all rows from the 5 USGS roads datasets, reproject to EPSG 4326 (to match the LPNF boundary CRS), clean/tidy the data, crop it to the northern LPNF boundary, and save the output (write to `clean_data` folder in data repository)


```{r usgs-roads-north}
# North: Roads

# combine data into one df with rbind (doing this step may take a few minutes, as these have 550 thousand rows each)
usgs_roads <- rbind(usgs_roads_0, usgs_roads_1, usgs_roads_2, usgs_roads_3, usgs_roads_4)


print("The CRS of the LPNF Boundary and the USGS Roads data match:")
st_crs(lpnf_boundary_north) == st_crs(usgs_roads)

# We'll need to reproject and clean/tidy our data before cropping to the northern LPNF boundary!

# Clean & tidy ----
# this step may also take a few minutes
usgs_roads_clean <- usgs_roads %>% 
  st_transform(crs = st_crs(lpnf_boundary_north)) %>%
  janitor::clean_names() %>%
  dplyr::mutate(road = 1) %>%  # add column of 1s for plotting
  dplyr::select(road, geometry) # keep just this column (and geometries) for plotting



# Crop to northern LPNF boundary ----
# this step takes the longest (up to several minutes depending on your computing power)
usgs_roads_north <- usgs_roads_clean %>% 
  st_intersection(lpnf_boundary_north) %>%  # crop to northern LPNF boundary
  dplyr::select(-FID) # remove irrelevant column


# optional: plot to see output ----
# ggplot() +
#   geom_sf(data = usgs_roads_north, color = "black") +
#   geom_sf(data = lpnf_boundary_north, color = "forestgreen", fill = "transparent", linewidth = 1.5) +
#   theme_classic()

# Save output to clean_data folder ----
# st_write(usgs_roads_north, "~/../../capstone/milkweedmod/clean_data/trails_and_roads/usgs/usgs_roads_north.shp",
#         append = FALSE) # replace existing file that shares the same name (if appropriate)

```

