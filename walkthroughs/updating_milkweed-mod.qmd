# Intro


#### Load packages
```{r}
library(spocc)
library(spThin)
library(dismo)
library(sf)
library(ENMeval)
library(wallace)
library(tidyverse)
library(here)
library(terra)
library(raster)
source("R/addLegend_decreasing.R")
source("R/setup.R")
source("R/milkweed_maxent.R")
```


```{r}
# generating *fake* data to test the walk through- will be deleted ----
library(rgbif)
gbif_data <- occ_data(scientificName = "Asclepias eriocarpa", hasCoordinate = TRUE, limit = 400) 
new_data <- gbif_data$data %>%
  filter(stateProvince == "California",
         decimalLongitude < -121.0, 
         decimalLatitude < 37) %>%
  select(decimalLongitude, decimalLatitude, scientificName) %>%
  rename(longitude = decimalLongitude,
         latitude = decimalLatitude,
         milkweed_sp = scientificName) %>%
  mutate(milkweed_sp = "Asclepias eriocarpa",
         region = "North")

ggplot() +
  geom_point(data = new_data, aes(x = longitude, y = latitude), size = 0.5) +
  geom_sf(data = lpnf_north_buffered, alpha = 0.5)
```


#### Read in data used for modeling
```{r}
# environmental data raster stack
environmental_layers <- brick("path/to/env_stack.tif")
# environmental_layers <- envs_Ac

# los padres forest boundary files
lpnf_boundary <- st_read("path/to/lpnf_boundary.shp")
lpnf_north <- st_read("path/to/lpnf_boundary_north.shp")
lpnf_south <- st_read("path/to/lpnf_boundary_south.shp")

# read in properly formatted milkweed polygon data
milkweed_data_raw <- st_read("path/to/data")
# milkweed_data_raw <- st_read(here("~/../../capstone/milkweedmod/raw_data/milkweed_polygon_data/"))
```

##### Troubleshooting Errors
Problems with reading in the data:


# SDM 
## Add new data

### Clean new milkweed survey data
Now that the new data milkweed data is read in, we want to check that the structure of the data looks correct. Using `View(milkweed_data_raw)` look for the columns in the data `Milkweed_P`, `MilkweedSp`, `region`, and `geometry` (geometry will be the very last column). These are the columns we want to use for the species distribution modeling. 
```{r}
# view the data frame; the data frame will pop up in a new tab at the top
View(milkweed_data_raw)
```

##### Troubleshooting Errors
Different column names/missing columns:

### Clean New Data
If everything is looking good, let's move on to cleaning the data up a bit. We want to select only the columns we need for modeling, and rename them to names that are a bit simpler. Since this data has both "yes" and "no" values in the `Milkweed_P`, we want to filter to only keep the "yes" values. Finally, let's transform the coordinate reference system (CRS) to EPSG:4326, since this the the CRS that the prepared environmental data is in. 
```{r}
milkweed_clean <- milkweed_data_raw |> 
  janitor::clean_names() |> 
  filter(milkweed_p != "no")  %>%
  st_transform("EPSG:4326") %>%
  dplyr::select(milkweed_sp)

# check that the new clean data is looking correct
head(milkweed_clean)
```

Here's an example what the data structure should look like:
```
  milkweed_sp       geometry
1 Asclepias vestita MULTIPOLYGON (((-119.3003 3...
2 Asclepias erosa   MULTIPOLYGON (((-119.1852 3...
3 Asclepias cali... MULTIPOLYGON (((-119.402 34...
```

#### Convert Polygons to Points
Maxent modeling only works with point data, so we are going to use the multipolygon border to extract points from the area.

```{r}
milkweed_cast_points <- st_cast(milkweed_clean, "MULTIPOINT") %>% 
  st_cast("POINT")

milkweed_points <- milkweed_cast_points %>%
  group_by(milkweed_sp) %>%
  st_coordinates() %>%
  data.frame() %>%
  cbind(milkweed_cast_points) %>%
  dplyr::select(-geometry) %>%
  rename(longitude = X,
         latitude = Y) %>%
  mutate(region = "South")
```

### Join new data with old data

If this new data is in the same data frame as the data originally used for modeling, do not run this next code chunk, and move on the the next section **Data Sub-setting**. If this new data has none of the previous survey data, continue with running the code below. 

```{r}
milkweed_points <- rbind(milkweed_points, milkweed_survey_2023)

# milkweed_points <- rbind(milkweed_points, new_data)
```


##### Troubleshooting Errors

### Data subsetting

#### Select data for each species in the northern region of the LPNF
```{r}
milkweed_north <- milkweed_points %>%
  filter(region == "North")

# californica
californica_north <- milkweed_north %>%
  filter(milkweed_sp == "Asclepias californica")
# erosa
erosa_north <- milkweed_north %>%
  filter(milkweed_sp == "Asclepias erosa")
# eriocarpa
eriocarpa_north <- milkweed_north %>%
  filter(milkweed_sp == "Asclepias eriocarpa")
# vestita
vestita_north <- milkweed_north %>%
  filter(milkweed_sp == "Asclepias vestita")
```

#### Select data for each species in the southern region of the LPNF
```{r}
milkweed_south <- milkweed_points %>%
  filter(region == "South")

# californica
californica_south <- milkweed_south %>%
  filter(milkweed_sp == "Asclepias californica")
# erosa
erosa_south <- milkweed_south %>%
  filter(milkweed_sp == "Asclepias erosa")
# eriocarpa
eriocarpa_south <- milkweed_south %>%
  filter(milkweed_sp == "Asclepias eriocarpa")
# vestita
vestita_south <- milkweed_south %>%
  filter(milkweed_sp == "Asclepias vestita")
```


## Model
To perform species distribution modeling, we have used various functions from the R packages {Wallace}, {dismo}, and {ENMeval}. There are many steps to the modeling process and these have been broken down into smaller sections


### Model South

#### Obtain environmental data values based on the occurence coordinates and join with the occurance points
```{r}
occurence_coordinates <- eriocarpa_south[c("longitude", "latitude")]
environmental_values <- as.data.frame(raster::extract(environmental_layers, occurence_coordinates, cellnumbers = TRUE))

# add columns for env variable values for each occurrence record
occurence_env_values <- cbind(eriocarpa_south, environmental_values)
```

#### Process the occurence and environmental data
```{r}
# Spatially thin the occurrence points
eriocarpa_south <- poccs_thinOccs(
  occs = occurence_env_values, 
  thinDist = 0.05) # adjust this value if you would like to change the thinning distaince (in km)


# Mask environmental data to provided extent
environmental_mask <- penvs_bgMask(
  occs = eriocarpa_south, # occurence points
  envs = environmental_layers, # environmental layers
  bgExt = lpnf_south_buffered) # extent to model on (southern section of lpnf with a buffer)

# Sample background points from the provided area
bg_sample_points <- penvs_bgSample(
  occs = eriocarpa_south,
  bgMask =  environmental_mask,
  bgPtsNum = 5000)

# Extract values of environmental layers for each background point
bgEnvsVals_Ac <- as.data.frame(raster::extract(environmental_mask,  bg_sample_points))
##Add extracted values to background points table
bgEnvsVals_Ac <- cbind(scientific_name = paste0("bg_", "Asclepias erosa"), bg_sample_points,
                            occID = NA, year = NA, institution_code = NA, country = NA,
                            state_province = NA, locality = NA, elevation = NA,
                            record_type = NA, bgEnvsVals_Ac)
```


#### Model transfer (optional, if no north data)


### Model North


## Model Selection
```{r}
# select model and predict
  auc_max <- model_Ac@results %>%
    select(tune.args, auc.train) %>%
  arrange(desc(auc.train)) %>%
    head(1) %>%
    mutate(tune.args = as.character(tune.args))
```

## Join models & Plot
- North and south data present
- South only and transfer

## Save model outputs
- Where to move to update dashboard


# Updating “closed” Trails and Roads
Direct to trails and roads doc that already has commented note on how to filter (note again that this is only applicable to the south)

### Using those updates to update site accessibility 
Instruct on where/how to run rescale layers, etc. again.

## Updating Site Priority 
Using new outputs from SDM – north and south, species-specific and max(all) 

Save outputs to _____ (note here that this is where the dashboard will be pulling from) 


