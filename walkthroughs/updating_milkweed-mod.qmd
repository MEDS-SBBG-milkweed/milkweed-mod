# Intro


#### Load packages
```{r}
library(spocc)
library(spThin)
library(dismo)
library(sf)
library(ENMeval)
library(wallace)
library(tidyverse)
library(here)
library(terra)
library(raster)
source("scripts/addLegend_decreasing.R")
source("scripts/setup.R")
source("maxent/milkweed_maxent.R")
```

#### Read in data used for modeling
```{r}
# environmental data raster stack
envs_Ac <- brick("path/to/env_stack.tif")

# los padres forest boundary files
lpnf_boundary <- st_read("path/to/lpnf_boundary.shp")
lpnf_north <- st_read("path/to/lpnf_boundary_north.shp")
lpnf_south <- st_read("path/to/lpnf_boundary_south.shp")

# read in properly formatted milkweed polygon data
new_milkweed_raw <- st_read("path/to/data")
```

##### Troubleshooting Errors
Problems with reading in the data:


# SDM 
## Add new data

### Clean new milkweed survey data
Now that the new data milkweed data is read in, we want to check that the structure of the data looks correct. Using `View(new_milkweed_raw)` look for the columns in the data `Milkweed_P`, `MilkweedSp`, `region`, and `geometry` (this will be the very last column). These are the columns we want to use for the species distribution modeling. 
```{r}
# view the data frame; the data frame will pop up in a new tab at the top
View(new_milkweed_raw)
```

##### Troubleshooting Errors
Different column names/missing columns:

### Clean New Data
If everything is looking good, let's move on to cleaning the data up a bit. We want to select only the columns we need for modeling, and rename them to names that are a bit simpler. Since this data has both "yes" and "no" values in the `Milkweed_P`, we want to filter to only keep the "yes" values. Finally, let's transform the coordinate reference system (CRS) to EPSG:4326, since this the the CRS that the prepared environmental data is in. 
```{r}
milkweed_clean <- new_milkweed_raw |> 
  janitor::clean_names() |> 
  filter(milkweed_p != "no")  %>%
  st_transform("EPSG:4326") %>%
  dplyr::select(milkweed_sp)

# check that the new clean data is looking correct
head(milkweed_clean)
```

Here's an example what the data structure should look like:
```
  milkweed_sp       geometry
1 Asclepias vestita MULTIPOLYGON (((-119.3003 3...
2 Asclepias erosa   MULTIPOLYGON (((-119.1852 3...
3 Asclepias cali... MULTIPOLYGON (((-119.402 34...
```

#### Convert Polygons to Points
Maxent modeling only works with point data, so we are going to use the multipolygon border to extract points from the area.

```{r}
milkweed_cast_points <- st_cast(milkweed_presence, "MULTIPOINT") %>% 
  st_cast("POINT")

milkweed_points <- milkweed_cast_points %>%
  group_by(milkweed_sp) %>%
  st_coordinates() %>%
  data.frame() %>%
  cbind(milkweed_cast_points) %>%
  dplyr::select(-geometry) %>%
  rename(longitude = X,
         latitude = Y)
```

### Join new data with old data

If this new data is in the same data frame as the data originally used for modeling, do not run this next code chunk, and move on the the next section **Data Sub-setting**. If this new data has none of the previous survey data, continue with running the code below. 

```{r}
milkweed_points <- rbind(milkweed_points, milkweed_survey_2023)
```


##### Troubleshooting Errors

### Data subsetting

#### Select data for the northern region of the LPNF
```{r}

```

#### Select data for the southern region of the LPNF
```{r}

```


- subset to north and south
- join south new with south old

## Model
To perform species distribution modeling, we have used various functions from the R packages {Wallace}, {dismo}, and {ENMeval}. There are many steps to the modeling process, but for ease of use, we have complied the main components of the process into a function. The function is `milkweed_maxent()` and we will need to give the function:
  1. data frame with the new species points
  2. species name we want to model (this must match the species name as it appears in the data frame)
  3. environmental data raster stack
  4. area we want to predict on (the southern or northern part of the LPNF)

```{r}

```

### Model South


#### Model transfer (optional, if no north data)


### Model North


## Model Selection
```{r}
# select model and predict
  auc_max <- model_Ac@results %>%
    select(tune.args, auc.train) %>%
  arrange(desc(auc.train)) %>%
    head(1) %>%
    mutate(tune.args = as.character(tune.args))
```

## Join models & Plot
- North and south data present
- South only and transfer

## Save model outputs
- Where to move to update dashboard


# Updating “closed” Trails and Roads
Direct to trails and roads doc that already has commented note on how to filter (note again that this is only applicable to the south)

### Using those updates to update site accessibility 
Instruct on where/how to run rescale layers, etc. again.

## Updating Site Priority 
Using new outputs from SDM – north and south, species-specific and max(all) 

Save outputs to _____ (note here that this is where the dashboard will be pulling from) 


