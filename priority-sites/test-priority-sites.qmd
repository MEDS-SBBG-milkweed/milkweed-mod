---
author: "Anna Ramji"
date: 2024-03-04
---


Testing out a combination of suitability x random number for plotting for faculty presentatoin

```{r}

# load necessary packages
library(tidyverse)
library(janitor)
library(sf)
library(ggspatial)
library(terra)
library(here)
library(leaflet)


# read in the model output raster data
model_raster <- terra::rast(here("~/../../capstone/milkweedmod/data/models/allpoints_bioclim_canopy_dem.tif"))





```



```{r}
plot(model_raster)
```

multiply by random number


```{r}

min_max <- minmax(model_raster + 22)

# (value - minimum_vale) / (maximum_value - minimum_value)
test_rescaled <- ((model_raster + 22) - min_max[1,]) / (min_max[2,] - min_max[1,])

plot(test_rescaled)



```


```{r}
# read in forest boundary
lpnf_boundary <- st_read(here("~/../../capstone/milkweedmod/data/lpnf_boundary_data/lpnf_boundary_buffered/lpnf_boundary_buffered.shp"))

boundary_raster <- st_rasterize(lpnf_boundary)

boundary_rast <- rast(boundary_raster)

class(boundary_rast)

st_crs(boundary_rast) == st_crs(test_rescaled)
# setting extents to match
ext(boundary_rast) <- ext(test_rescaled)
# project to same crs, resolution 
boundary_reproject <- project(boundary_rast,
                                    crs(test_rescaled),
                                       res = res(test_rescaled))

ext(boundary_reproject) <- ext(test_rescaled)
ext(boundary_reproject) == ext(test_rescaled)

# resample to get equal resolution and extent 
test_boundary_resample <- resample(boundary_reproject, test_rescaled)


test_masked <- mask(test_rescaled, mask = test_boundary_resample)

plot(test_masked)
```


```{r plot-test-masked}
source("scripts/addLegend_decreasing.R")
testVals_Ac <- wallace::getRasterVals(test_masked$lyr1,"cloglog")

rasCols_Ac <- c("#2c7bb6", "#abd9e9", "#ffffbf", "#fdae61", "#d7191c")

legendPal <- colorNumeric(rev(rasCols_Ac), testVals_Ac, na.color = 'transparent')
rasPal_Ac <- colorNumeric(rasCols_Ac, testVals_Ac, na.color = 'transparent')

leaflet() %>% 
  addProviderTiles(provider = providers$Esri.WorldTerrain) %>% 
  addRasterImage(x = test_masked) %>% 
  addLegend_decreasing("bottomleft", pal = legendPal, values = testVals_Ac, layerId = "xfer",
            labFormat = reverseLabel(), decreasing = FALSE,
            title = "Asclepias sp. <br>Predicted Suitability<br>(Transferred)")


```



```{r}
leaflet() %>% 
  addProviderTiles(provider = providers$Esri.WorldTerrain) %>% 
  addRasterImage(x = test_rescaled) %>% 
  addPolygons(data = lpnf_boundary,
              fill = FALSE,
              color = "purple",
              weight = 3) %>% 
  addPolylines(data = trails_leaflet,
               color = "black",
               weight = 1,
               opacity =  1
               ) %>%
  leaflet::addLegend("bottomleft", values = lpnf_boundary, colors = c("purple"), labels = "LPNF Boundary", opacity = 1) %>%
  leaflet:: addLegend("bottomleft", values = lpnf_ownership_mask1, colors = c("darkgreen"), labels = "Public Land") %>%
  leaflet::addLegend("bottomleft", values = trails_leaflet, colors = c("black"), labels = "Trails and Roads", opacity = 1)

```

