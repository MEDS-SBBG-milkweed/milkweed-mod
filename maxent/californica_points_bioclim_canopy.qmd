---
title: ""
format: html
---

```{r}
library(spocc)
library(spThin)
library(dismo)
library(sf)
library(ENMeval)
library(wallace)
library(tidyverse)
```

```{r}
# Prepare milkweed data 
milkweed_path <- here::here("~/../../capstone/milkweedmod/data/milkweed_polygon_data/")
milkweed_data_raw <- st_read(milkweed_path)

# Read in bioclim & canopy data
bioclim <- brick(here::here("~/../../capstone/milkweedmod/data/bioclim/wallace_bioclim.tif"))
canopy <- raster(here::here("~/../../capstone/milkweedmod/data/canopy_cover/canopy_cover_cleaned.tif"))

# California National Forest boundaries
boundary <- st_read(here::here("~/../../capstone/milkweedmod/data/lpnf_boundary_data/S_USA_AdministrativeForest.gdb/"))

lpnf_boundary <- boundary %>% 
  filter(FORESTNAME %in% c("Los Padres National Forest")) %>%
  st_transform(crs = crs(bioclim))

forest_buffer <- lpnf_boundary  %>%
  st_buffer(dist = 1000)


# remove "No" observations
milkweed_presence <- milkweed_data_raw |> 
  janitor::clean_names() |> 
  filter(milkweed_p != "no")  %>%
  st_transform(crs(envs_Ac)) %>%
  filter(milkweed_sp == "Asclepias californica") %>%
  dplyr::select(milkweed_sp)

# make points
multi.p <- st_cast(milkweed_presence, "MULTIPOINT")
my_points <- multi.p  %>% st_cast("POINT")

milkweed_points <- my_points %>%
  st_coordinates() %>%
  data.frame() %>%
  mutate(scientific_name = "Asclepias californica") %>%
  mutate(occID = row_number()) %>%
  rename(longitude = X,
         latitude = Y)

# check to see that the points are within the buffer
# leaflet() %>%
#   addTiles() %>%
#   addPolygons(data = lpnf_boundary,
#               fill = FALSE,
#               color = "black",
#               weight = 2) %>%
#   addPolygons(data = forest_buffer,
#               fill = FALSE,
#               color = "red",
#               weight = 2) %>%
#   addCircleMarkers(data = milkweed_points,
#                    radius = 2, 
#                    fill = TRUE, 
#                    opacity = 0.8)
```

##### Crop and stack bioclim and canopy cover

```{r}
# crop to forest_buffer
bioclim_crop <- crop(bioclim, forest_buffer)
canopy_crop <- crop(canopy, forest_buffer)

# files are in same crs but extents do not match
same.crs(bioclim_crop, canopy_crop)

# resoource: https://gis.stackexchange.com/questions/403536/raster-extent-issue-in-r
bioclim_crop_resample <- resample(bioclim_crop, canopy_crop)
envs_Ac <- c(bioclim_crop_resample, canopy_crop)


# stack
envs_Ac <- raster::stack(bioclim_crop, canopy_crop)
```


## Analysis

### Obtain Occurrence Data

```{r}
# rename milkweed occurrence data
 occs_Ac <- milkweed_points
```

### Obtain environmental data

Using WorldClim (<http://www.worldclim.org/>) bioclimatic dataset at
resolution of 0.5 arcmin.

```{r}
# Download environmental data 
# envs_Ac_E <- envs_worldclim(
#   bcRes = 0.5, # resolution 30arc seconds
#   bcSel = c('bio01', 'bio02', 'bio03', 'bio04', 'bio05', 'bio06', 'bio07', 'bio08', 'bio09', 'bio10', 'bio11', 'bio12', 'bio13', 'bio14', 'bio15', 'bio16', 'bio17', 'bio18', 'bio19'), # select all bioclim vars
#    mapCntr = c(-119.658, 34.909), # Mandatory for 30 arcsec resolution - might need to adjust  
#   doBrick = FALSE)
# 
# envs_Ac_W <- envs_worldclim(
#   bcRes = 0.5, # resolution 30arc seconds
#   bcSel = c('bio01', 'bio02', 'bio03', 'bio04', 'bio05', 'bio06', 'bio07', 'bio08', 'bio09', 'bio10', 'bio11', 'bio12', 'bio13', 'bio14', 'bio15', 'bio16', 'bio17', 'bio18', 'bio19'), # select all bioclim vars
#    mapCntr = c(-120.478, 38.271), # Mandatory for 30 arcsec resolution - might need to adjust  
#   doBrick = FALSE)

# Mosaic the two tiles together to get whole study region
#envs_Ac <- mosaic(envs_Ac_W, envs_Ac_E, fun = "mean")
#writeRaster(envs_Ac, here::here("~/../../capstone/milkweedmod/data/bioclim/wallace_bioclim.tif"))

# Read in bioclim data
#envs_Ac <- brick(here::here("~/../../capstone/milkweedmod/data/bioclim/wallace_bioclim.tif"))

occs_geom_Ac <- occs_Ac[c("longitude", "latitude")]
occs_vals_Ac <- as.data.frame(raster::extract(envs_Ac, occs_geom_Ac, cellnumbers = TRUE))

# Remove duplicated same cell values
# occs_Ac <- occs_Ac[!duplicated(occs_vals_Ac[, 1]), ]
# occs_vals_Ac <- occs_vals_Ac[!duplicated(occs_vals_Ac[, 1]), -1]

# # remove occurrence records with NA environmental values
# occs_Ac <- occs_Ac[!(rowSums(is.na(occs_vals_Ac)) >= 1), ]
# 
# # also remove variable value rows with NA environmental values
# occs_vals_Ac <- na.omit(occs_vals_Ac)

# add columns for env variable values for each occurrence record
occs_Ac <- cbind(occs_Ac, occs_vals_Ac)
```


### Process Occurrence Data

Thinning the occurrences to 0.1 km

```{r}
# Thin occurrences 
occs_Ac <- poccs_thinOccs(
  occs = occs_Ac, 
  thinDist = 0.1) # adjust this value if needed
```

### Process environmental data

Sampling of 5000 background points and corresponding environmental data
using a “minimum convex polygon” method with a 1.1 degree buffer.

```{r}
# Generate background extent 
bgExt_Ac <- penvs_bgExtent(
  occs = occs_Ac,
  bgSel = "minimum convex polygon",
  bgBuf = 1.1)
# Mask environmental data to provided extent
bgMask_Ac <- penvs_bgMask(
  occs = occs_Ac,
  envs = envs_Ac,
  bgExt = bgExt_Ac)
# Sample background points from the provided area
bgSample_Ac <- penvs_bgSample(
  occs = occs_Ac,
  bgMask =  bgMask_Ac,
  bgPtsNum = 5000)
# Extract values of environmental layers for each background point
bgEnvsVals_Ac <- as.data.frame(raster::extract(bgMask_Ac,  bgSample_Ac))
##Add extracted values to background points table
bgEnvsVals_Ac <- cbind(scientific_name = paste0("bg_", "Asclepias eriocarpa"), bgSample_Ac,
                            occID = NA, year = NA, institution_code = NA, country = NA,
                            state_province = NA, locality = NA, elevation = NA,
                            record_type = NA, bgEnvsVals_Ac)
```

### Partition occurrence data

Partition occurrences and background points for model training and
validation using block, a spatial partition method.

```{r}
# R code to get partitioned data
groups_Ac <- part_partitionOccs(
  occs = occs_Ac ,
  bg =  bgSample_Ac, 
  method = "block") 
```


### Build and Evaluate Niche Model

Generating a species distribution model using the maxnet algorithm as
implemented in ENMeval V2.0 (with clamping = FALSE). For tuning using L,
LQ, H, LQH, LQHP feature classes and regularization multipliers in the
1, 2 range increasing by 1. Not using any categorical predictor
variables.

```{r}
# Run maxent model for the selected species
model_Ac <- model_maxent(
  occs = occs_Ac,
  bg = bgEnvsVals_Ac,
  user.grp = groups_Ac, 
  bgMsk = bgMask_Ac,
  rms = c(1, 2), 
  rmsStep =  1,
  fcs = c('L'), # , 'LQ', 'H', 'LQH', 'LQHP'
  clampSel = FALSE,
  algMaxent = "maxnet",
  parallel = FALSE,
  numCores = 7)

# we can run the other models at the same time, but for now I'm just using 'L' (linear) just so it goes a bit faster while we're getting everything sorted out
```


### Visualize

Generate a map of the maxnet generated model with no threshold

```{r}
# Select current model and obtain raster prediction
m_Ac <- model_Ac@models[["fc.L_rm.1"]] # change this for different models
predSel_Ac <- predictMaxnet(m_Ac, bgMask_Ac,
                                          type = "cloglog", # change for different types
                                          clamp = FALSE)
#Get values of prediction
mapPredVals_Ac <- getRasterVals(predSel_Ac, "cloglog") # change for different types

#Define colors and legend  
rasCols <- c("#2c7bb6", "#abd9e9", "#ffffbf", "#fdae61", "#d7191c")

legendPal <- colorNumeric(rasCols, mapPredVals_Ac, na.color = 'transparent')
rasPal <- colorNumeric(rasCols, mapPredVals_Ac, na.color = 'transparent')

#Generate map
m <- leaflet() %>% addProviderTiles(providers$Esri.WorldTopoMap) 
m  %>%
  addCircleMarkers(data = occs_Ac, lat = ~latitude, lng = ~longitude,
                   radius = 5, color = 'red', fill = TRUE, fillColor = "red",
                   fillOpacity = 0.2, weight = 2) %>% 
  ##Add model prediction
  addRasterImage(predSel_Ac, colors = rasPal, opacity = 0.7,
                 group = 'vis', layerId = 'mapPred', method = "ngb") %>%
 ##add background polygons
  addPolygons(data = bgExt_Ac,fill = FALSE,
              weight = 4, color = "blue", group = 'proj') %>%
  leaflet::addLegend("bottomright", pal = legendPal, values = mapPredVals_Ac, layerId = "train",
            labFormat = reverseLabel(),
            title = "Asclepias vestita<br>Predicted Suitability<br>(Training)")
```

