---
title: "Creating the final accessibility index"
---

```{r}
library(terra)
library(here)
# source rescale_raster function
source(here("R", "rescale_raster.R"))
```


# Creating the final index by multiplying together all the individual, rescaled layers

## Read in layers
```{r}
canopy <- rast(here("~/../../capstone/milkweedmod/outputs/site_accessibility_outputs/canopy_rescaled.tif"))
slope <- rast(here("~/../../capstone/milkweedmod/outputs/site_accessibility_outputs/slope_rescaled.tif"))
trails <- rast(here("~/../../capstone/milkweedmod/outputs/site_accessibility_outputs/trails_rescaled.tif"))
roads <- rast(here("~/../../capstone/milkweedmod/outputs/site_accessibility_outputs/roads_rescaled.tif"))
ownership <- rast(here("~/../../capstone/milkweedmod/outputs/site_accessibility_outputs/ownership_rescaled.tif"))
```


```{r}
access_index <- canopy * slope * ownership * trails * roads
plot(access_index)
```

# Rescale accessibility index for a final index from 0 - 1

```{r}
access_index_final <- rescale_raster(access_index)

plot(access_index_final)
```
# Save final accessibility index
```{r}
# writeRaster(access_index_final, here("~/../../capstone/milkweedmod/outputs/site_accessibility_outputs/access_index_final.tif"), overwrite = TRUE)
```

# Save final accessibility index to GitHub
```{r}
#writeRaster(access_index_final, here("outputs", "dashboard", "access_index_final.tif"), overwrite = TRUE)
```


# Plot Survey Site Accessibility 

To create the figures in the outputs/figs folder in the GitHub repository, we ran the following code chunks and screenshotted them. While this is only somewhat reproducible, it is due to the incompatibility with the version of R on the server that we had to work on for this project. We've left an example of the reproducible method for saving leaflet outputs as figures in the final code chunk at the bottom of this notebook.


## Plot final survey site accessibility index

```{r}
access_index <- rast(here("~/../../capstone/milkweedmod/outputs/site_accessibility_outputs/access_index_final.tif"))
lpnf_boundary <- st_read(here("~/../../capstone/milkweedmod/clean_data/lpnf_boundary/lpnf_boundary/lpnf_boundary.shp"),
                         quiet = TRUE)

library(leaflet)
library(wallace)
source(here("R", "addLegend_decreasing.R"))

accessVals <- getRasterVals(access_index) # change for different types

pal_access <- c("#FFFFFF","#CCD4EF", "#99A9DF", "#667FD0", "#3354C0", "#0029B0")

legendPal <- colorNumeric(pal_access, accessVals, na.color = 'transparent')
rasPal <- colorNumeric(pal_access, accessVals, na.color = 'transparent')


accessibility_index_leaflet <- leaflet(options = leafletOptions(zoomControl = FALSE)) %>%
  
  addProviderTiles(providers$Esri.WorldTerrain) %>%
  addLegend_decreasing("bottomleft", pal = legendPal, values = accessVals,
                       labFormat = reverseLabel(), decreasing = TRUE,
                       title = "Accessibility Index") %>%
  # map model prediction raster and transfer polygon
  addRasterImage(access_index, colors = rasPal,
                 method = "ngb") %>%
  
  # #add transfer polygon (user drawn area)
  addPolygons(data = lpnf_boundary, fill = FALSE,
              weight = 2, color = "black", group = 'xfer') %>% 
  addScaleBar(position = "bottomright")

accessibility_index_leaflet

```



## Plot individual layers of survey site accessibility index

We already read in the individually rescaled layers at the top of this notebook, so we only need to use `getRasterVals()` on those objects and repeat the previous leaflet mapping steps. 

```{r}
# --------------- canopy cover --------------------------
accessVals <- getRasterVals(canopy) # change for different types


canopy_index_leaflet <- leaflet(options = leafletOptions(zoomControl = FALSE)) %>%
  
  addProviderTiles(providers$Esri.WorldTerrain) %>%
  addLegend_decreasing("bottomleft", pal = legendPal, values = accessVals,
                       labFormat = reverseLabel(), decreasing = TRUE,
                       title = "Accessibility Index") %>%
  # map model prediction raster and transfer polygon
  addRasterImage(access_index, colors = rasPal,
                 method = "ngb") %>%
  
  # #add transfer polygon (user drawn area)
  addPolygons(data = lpnf_boundary, fill = FALSE,
              weight = 2, color = "black", group = 'xfer') %>% 
  addScaleBar(position = "bottomright")

canopy_index_leaflet

# ---------------- Land ownership ------------------------
accessVals <- getRasterVals(ownership) # change for different types

ownership_index_leaflet <- leaflet(options = leafletOptions(zoomControl = FALSE)) %>%
  
  addProviderTiles(providers$Esri.WorldTerrain) %>%
  addLegend_decreasing("bottomleft", pal = legendPal, values = accessVals,
                       labFormat = reverseLabel(), decreasing = TRUE,
                       title = "Accessibility Index") %>%
  # map model prediction raster and transfer polygon
  addRasterImage(access_index, colors = rasPal,
                 method = "ngb") %>%
  
  # #add transfer polygon (user drawn area)
  addPolygons(data = lpnf_boundary, fill = FALSE,
              weight = 2, color = "black", group = 'xfer') %>% 
  addScaleBar(position = "bottomright")

ownership_index_leaflet

# ---------------- (distance from) Roads -----------------------
accessVals <- getRasterVals(roads) # change for different types


roads_index_leaflet <- leaflet(options = leafletOptions(zoomControl = FALSE)) %>%
  
  addProviderTiles(providers$Esri.WorldTerrain) %>%
  addLegend_decreasing("bottomleft", pal = legendPal, values = accessVals,
                       labFormat = reverseLabel(), decreasing = TRUE,
                       title = "Accessibility Index") %>%
  # map model prediction raster and transfer polygon
  addRasterImage(access_index, colors = rasPal,
                 method = "ngb") %>%
  
  # #add transfer polygon (user drawn area)
  addPolygons(data = lpnf_boundary, fill = FALSE,
              weight = 2, color = "black", group = 'xfer') %>% 
  addScaleBar(position = "bottomright")

roads_index_leaflet

# --------------- (distance from) Trails --------------------------------
accessVals <- getRasterVals(trails) # change for different types


trails_index_leaflet <- leaflet(options = leafletOptions(zoomControl = FALSE)) %>%
  
  addProviderTiles(providers$Esri.WorldTerrain) %>%
  addLegend_decreasing("bottomleft", pal = legendPal, values = accessVals,
                       labFormat = reverseLabel(), decreasing = TRUE,
                       title = "Accessibility Index") %>%
  # map model prediction raster and transfer polygon
  addRasterImage(access_index, colors = rasPal,
                 method = "ngb") %>%
  
  # #add transfer polygon (user drawn area)
  addPolygons(data = lpnf_boundary, fill = FALSE,
              weight = 2, color = "black", group = 'xfer') %>% 
  addScaleBar(position = "bottomright")

trails_index_leaflet


# ----------------- Slope ----------------------------------------------
accessVals <- getRasterVals(slope) # change for different types

slope_index_leaflet <- leaflet(options = leafletOptions(zoomControl = FALSE)) %>%
  
  addProviderTiles(providers$Esri.WorldTerrain) %>%
  addLegend_decreasing("bottomleft", pal = legendPal, values = accessVals,
                       labFormat = reverseLabel(), decreasing = TRUE,
                       title = "Accessibility Index") %>%
  # map model prediction raster and transfer polygon
  addRasterImage(access_index, colors = rasPal,
                 method = "ngb") %>%
  
  # #add transfer polygon (user drawn area)
  addPolygons(data = lpnf_boundary, fill = FALSE,
              weight = 2, color = "black", group = 'xfer') %>% 
  addScaleBar(position = "bottomright")

slope_index_leaflet


```



## save leaflet as png
```{r}
library(mapview)

## 'leaflet' objects (image above)
# need to install PhantomJS with webshot::install_phantomjs()
mapshot(accessibility_index_leaflet, file = here("~/access_index_leaflet.png"))

## 'mapview' objects (image below)
m2 <- mapview(breweries91)
mapshot(m2, file = "~/breweries.png")
```

