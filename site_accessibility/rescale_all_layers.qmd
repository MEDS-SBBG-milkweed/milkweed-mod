---
title: "Rescale all layers for accessibility index to 0-1"
date-created: 04-09-2024
date-last-updated: 04-28-2024
---

This document's purpose is to rescale all layers for our accessibility raster to a scale of 0-1 (0 = least accessible, 1 = most accessible) and set to same extent, CRS, and resolution.  

# Set up

## Source Scripts
```{r, message = FALSE}
library(here)
# run here() in your console to see where the working directory file path starts

# Sourcing the setup script we developed for this notebook 
# reads in all of the data and packages that we need!

# takes a minute because it reprojects slope to correct CRS
source(here("R", "accessibility_setup.R")) # setup (reads in data, packages)
source(here("R", "rescale_raster.R")) # rescaling function
```

# Set everything to same resolution, extent, and CRS

CRS: EPSG 4326

```{r}
# this are the resolution, extent, and crs we want from the template
res(temp_rast) # 0.0083 0.0083
ext(temp_rast) # -122.0, -117.5014, 33.6, 36.9034 (xmin, xmax, ymin, ymax)
crs(temp_rast) # 4326
origin(temp_rast) # 0.0017, 0.0016
```

## Initial Check


### CRS
```{r}
# canopy cover
print("Does canopy_cover have correct CRS?")
st_crs(canopy_cover) == st_crs(temp_rast)

# slope
print("Does slope have correct CRS?")
st_crs(slope) == st_crs(temp_rast)

# distance from trails
print("Does trails have correct CRS?")
st_crs(trails) == st_crs(temp_rast)

# distance from roads
print("Does roads have correct CRS?")
st_crs(roads) == st_crs(temp_rast)

# land ownership
print("Does lpnf_ownership have correct CRS?")
st_crs(lpnf_ownership) == st_crs(temp_rast)
```

### Resolution
```{r}
# canopy
print("Does canopy_cover have the correct resolution?")
res(canopy_cover) == res(temp_rast)

# slope
print("Does slope have the correct resolution?")
res(slope) == res(temp_rast)

# distance from trails
print("Does trails have the correct resolution?")
res(trails) == res(temp_rast)

# distance from roads
print("Does roads have the correct resolution?")
res(roads) == res(temp_rast)

# land ownership
print("Does lpnf_ownership have the correct resolution?")
#res(lpnf_ownership) == res(temp_rast)
```

### Extent
```{r}
# canopy 
print("Does canpy_cover have the correct extent?")
ext(canopy_cover) == ext(temp_rast)

# slope 
print("Does slope have the correct extent?")
ext(slope) == ext(temp_rast)

# distance from trails 
print("Does trails have the correct extent?")
ext(trails) == ext(temp_rast)

# distance from roads 
print("Does roads have the correct extent?")
ext(roads) == ext(temp_rast)

# land ownership 
print("Does lpnf_ownership have the correct extent?")
ext(lpnf_ownership) == ext(temp_rast)
```

## Update with template raster
```{r}
canopy_reproject <- project(canopy_cover,temp_rast)

# going forward (4/28) with average
#slope_reproject_max <- project(slope, temp_rast, method = "max")
#slope_reproject_mode <- project(slope, temp_rast, method = "mode")
slope_reproject_avg <- project(slope, temp_rast, method = "average")
```


# Crop to LPNF Boundary

Next, we'll crop all of our layers other than Land Ownership to the LPNF boundary by using the polygons that represent the northern and southern regions as masks. We are doing this before rescaling because rescaling before cropping may result in highest or lowest values being cropped out of our areas of interest, which impacts the final rescaled layers as well as the final survey site accessibility index. Land Ownership has already been masked to the LPNF in the `data_cleaning/land_ownership.qmd` notebook, so we don't need to mask it again here.

```{r}
# crop to LPNF using terra's mask function
canopy_masked <- terra::mask(canopy_reproject, lpnf_boundary)
slope_masked <- terra::mask(slope_reproject_avg, lpnf_boundary)
trails_masked <- terra::mask(trails, lpnf_boundary)
roads_masked <- terra::mask(roads, lpnf_boundary)

```



# Rescale Layers

## Canopy Cover
```{r}
canopy_rescaled <- rescale_raster(canopy_masked)

# check that max = 1 and min = 0
plot(canopy_rescaled)
```

## Slope
```{r}
slope_rescaled <- rescale_raster(slope_masked)

plot(slope_rescaled)
```

## Distance from Trails
```{r}
trails_rescaled <- rescale_raster(trails_masked)

plot(trails_rescaled)
```


## Distance from Roads
```{r}
roads_rescaled <- rescale_raster(roads_masked)

plot(roads_rescaled)
```


## Land Ownership

For land ownership, we want a mask where 0 indicates private land and 1 indicates public land.

The data is a shape file with each row indicating geometry of public land, so I am first creating a column of 1s to indicate public land, then rasterizing using a template raster. 
```{r}
# make mask where 1 is public land and 0 is private land
lpnf_ownership_mask1 <- lpnf_ownership %>% 
  # new column of 1s
  mutate(ownership = rep(1, length(lpnf_ownership$OWN_LEVEL))) %>% 
  # remove original ownership level column
  dplyr::select(-OWN_LEVEL)

#rasterize lpnf_ownership
ownership_rasterize<- st_rasterize(lpnf_ownership_mask1, 
                                   template = temp_rast_stars) # align=TRUE supposed to not keep template values but not working
# align error: "Error in rep_len(x, prod(dim)) : invalid 'length.out' value"

ownership_rast <- rast(ownership_rasterize)

plot(ownership_rast)

```

When I was using the model output as a template, the rasterize function kept values from the template when rasterizing and I had to do an extra step, but now that I am using the template that is all 0s, the extra step is no longer needed.
```{r}
# ## From stackoverflow: "if `template` is a `stars` object, non-NA cells that are not covered by `sf` receive the value in `template`; see also argument `align`."
# 
# # now the raster has values between 0 and 1, but I want only 0 and 1
# plot(ownership_rast)
# 
# ## After reading and plotting different things, it looks like any area in the template that the land ownership DIDN'T cover was kept as the value in the template raster. So I am going to try to replace any values that don't equal 1 to 0
# 
# ownership_rast[ownership_rast<1] <- 0
# 
# plot(ownership_rast)
```


## Final Checks
```{r}
origin(ownership_masked) == origin(temp_rast)

origin(canopy_rescaled) == origin(temp_rast)

origin(slope_rescaled) == origin(temp_rast)

origin(trails_rescaled) == origin(temp_rast)

origin(roads_rescaled) == origin(temp_rast)


# Check that min value = 0 and max value = 1
canopy_rescaled
slope_rescaled
trails_rescaled
roads_rescaled

```

## Final rescaling (flipping scale) and cropping to LPNF boundary

Currently, all the continuous layers are rescaled where 1 is least accessible and 0 is most accessible (e.g. highest slope = 1) so, the last step is to flip the scale so that 1 = most accessible and 0 = least accessible

```{r}
canopy_final <- 1- (canopy_rescaled)

slope_final <- 1 - (slope_rescaled)

trails_final <- 1 - (trails_rescaled)

roads_final <- 1 - (roads_rescaled)

```


# Save everything in Taylor: milkweedmod/ouputs/site_accessibility_outputs/

```{r}
# update to Box Folder file path
#writeRaster(canopy_final, here("~/../../capstone/milkweedmod/outputs/site_accessibility_outputs/canopy_rescaled.tif"), overwrite = TRUE)
#writeRaster(slope_final, here("~/../../capstone/milkweedmod/outputs/site_accessibility_outputs/slope_rescaled.tif"), overwrite = TRUE)
#writeRaster(trails_final, here("~/../../capstone/milkweedmod/outputs/site_accessibility_outputs/trails_rescaled.tif"), overwrite = TRUE)
#writeRaster(roads_final, here("~/../../capstone/milkweedmod/outputs/site_accessibility_outputs/roads_rescaled.tif"), overwrite = TRUE)
#writeRaster(ownership_rast, here("~/../../capstone/milkweedmod/outputs/site_accessibility_outputs/ownership_rescaled.tif"), overwrite = TRUE)
```

# Save everything in GitHub for the dashboard: milkweed-mod/outputs/dashboard
```{r}
writeRaster(canopy_final, here("outputs", "dashboard", "canopy_rescaled.tif"), overwrite = TRUE)
writeRaster(slope_final, here("outputs", "dashboard", "slope_rescaled.tif"), overwrite = TRUE)
writeRaster(trails_final, here("outputs", "dashboard", "trails_rescaled.tif"), overwrite = TRUE)
writeRaster(roads_final, here("outputs", "dashboard", "roads_rescaled.tif"), overwrite = TRUE)
writeRaster(ownership_rast, here("outputs", "dashboard", "ownership_rescaled.tif"), overwrite = TRUE)
```

-------------------------------------------------------------------------------


```{r}
# need to look closely at these plots, slope looks more zoomed out than template even when same crs and extent
ext(slope_rescaled) <- ext(temp_rast2)
ext(canopy_rescaled) <- ext(temp_rast2)
plot(temp_rast2)
plot(slope_rescaled_reproject)
plot(canopy_rescaled)
plot(slope_rescaled)
```

4/11/24
Noticed some funky things going on with the slope raster: After rescaling, then manually converting crs and extent to match that of the template raster (`project(slope_rescaled, crs(temp_rast2))` and `ext(slope_rescaled <- ext(temp_rast2))`), the coastline of slope looked way more zoomed out than that of the template raster (like if I were to plot them on top of each other it would not line up). However, if I instead rescale slope and then `project(slope_rescaled, temp_rast2)`, therefore converting CRS, resolution, and extent of slope to that of the temp raster all in one, the coastline match up. The problem with this is that we are downsampling (?) slope becuase it is a much higher resolution than that of the template raster, and we end up with a scale of 0 to 0.6 instead of 0 to 1. **So now I need to look at the method downsampling and choose which one--nearest neighbor, sum, mode, mean?**

- billinear is the default and is good for continuous data but causes some smoothing

```{r}
# look at the different ways of sampling
slope_reprojected_max <- project(slope_rescaled, temp_rast, method = "max")
plot(slope_reprojected_max)

slope_reprojected_near <- project(slope_rescaled, temp_rast, method = "near")
plot(slope_reprojected_near)

plot(temp_rast)
```

