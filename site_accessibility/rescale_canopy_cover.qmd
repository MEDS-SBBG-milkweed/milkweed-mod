---
title: "Rescaling canopy cover for site accessibility"
author: "Amanda Herbst"
date-created: "Feb 29, 2024"
---

## Source Scripts
```{r, message = FALSE}
source("../scripts/addLegend_decreasing.R")
source("../scripts/accessibility_setup.R")
```

## Read in cleaned canopy cover data
```{r}
#canopy_cover <- terra::rast(here("~/../../capstone/milkweedmod/data/canopy_cover/canopy_cover_cleaned.tif"))
#lpnf_boundary <- st_read(here("~/../../capstone/milkweedmod/data/lpnf_boundary_data/lpnf_boundary/lpnf_boundary.shp"))

plot(canopy_cover)

temp_raster <- stars::read_stars(here::here("~/../../capstone/milkweedmod/data/models/allpoints_bioclim_canopy_dem.tif"))
plot(temp_raster)
temp_rast2 <- rast(temp_raster)
```

## Rescale canopy cover

```{r}
min_max <- minmax(canopy_cover) 
# (value - minimum_vale) / (maximum_value - minimum_value)
canopy_rescaled <- (canopy_cover - min_max[1,]) / (min_max[2,] - min_max[1,])

plot(canopy_rescaled)
canopy_rescaled

```
# mulitply canopy cover by land ownership

## rasterize lpnf land ownership

```{r}
# read in lpnf boundary
# lpnf_boundary <-  st_read(here("~/../../capstone/milkweedmod/data/lpnf_boundary_data/lpnf_boundary"))

# read in lpnf land ownership
#lpnf_ownership <- st_read(here("~/../../capstone/milkweedmod/data/clean_data/lpnf_land_ownership/lpnf_land_ownership.shp"))

# make mask where 1 is public land and 0 is private land
lpnf_ownership_mask1 <- lpnf_ownership %>% 
  # new column of 1s
  mutate(ownership = rep(1, length(lpnf_ownership$OWN_LEVEL))) %>% 
  # remove original ownership level column
  dplyr::select(-OWN_LEVEL)

#rasterize lpnf_ownership
ownership_rasterize<- st_rasterize(lpnf_ownership_mask1, 
                                   template = temp_raster) # align=TRUE supposed to not keep template values but not working
# align error: "Error in rep_len(x, prod(dim)) : invalid 'length.out' value"
                            
ownership_rast <- rast(ownership_rasterize)
## From stackoverflow: "if `template` is a `stars` object, non-NA cells that are not covered by `sf` receive the value in `template`; see also argument `align`."

class(ownership_rast)
# now the raster has values between 0 and 1, but I want only 0 and 1
plot(ownership_rast)

# try to rasterize before mask?
land_owner_rasterize <- st_rasterize(lpnf_ownership, template = temp_raster)
land_owner_rast <- rast(land_owner_rasterize)
plot(land_owner_rast)


## After reading and plotting different things, it looks like any area in the template that the land ownership DIDN'T cover was kept as the value in the template raster. So I am going to try to replace any values that don't equal 1 to 0

ownership_rast[ownership_rast<1] <- 0

# check that that worked by comparing original
plot(ownership_rast)
plot(land_owner_rast)
 
# looks good!
leaflet(
  # options = leafletOptions(crs = leafletCRS("L.CRS.EPSG4326"))
        ) %>% 
 addProviderTiles(providers$Esri.WorldTopoMap) %>%
addRasterImage(x = ownership_rast,
              # fillColor = "darkgreen",
              # color = "darkgreen",
              # weight = 1.5,
               opacity = 0.6
              )
```

```{r}
plot(ownership_rast)
plot(canopy_rescaled)
```

```{r}
st_crs(ownership_rast) == st_crs(canopy_rescaled)
# TRUE
ext(ownership_rast) == ext(canopy_rescaled)
#FALSE
res(ownership_rast) == res(canopy_rescaled)
# FALSE FALSE

ext(ownership_rast) <- ext(temp_rast2)
# reproject ownership to same CRS, extent, and resolution of canopy_cover
lpnf_ownership_reproject <- project(ownership_rast,
                                    crs(canopy_rescaled),
                                       res = res(canopy_rescaled))

# check crs, extent and resolution again
st_crs(lpnf_ownership_reproject) == st_crs(canopy_rescaled)
res(lpnf_ownership_reproject) == res(canopy_rescaled)
ext(lpnf_ownership_reproject) == ext(canopy_rescaled)

# resample to get equal resolution and extent 
lpnf_ownership_resample <- resample(lpnf_ownership_reproject, canopy_rescaled)

# double check 
ext(lpnf_ownership_resample) == ext(canopy_rescaled)
res(lpnf_ownership_resample) == res(canopy_rescaled)


```


```{r}
# subract from 1 to reverse scale to 0=least accessible, 1=most accessible
access_test <- (lpnf_ownership_resample*(1 - canopy_rescaled))

plot(lpnf_ownership_resample)
plot(canopy_rescaled)
plot(access_test)
```
# Leaflet

```{r}
#access_test_leaflet <- project(x = access_test, "EPSG:3857")
# crop to the lpnf boundary
test <- mask(access_test, lpnf_boundary)

mapPredVals_Ac <- wallace::getRasterVals(test)

colors <- c("#2c7bb6", "#abd9e9", "#ffffbf", "#fdae61", "#d7191c")

numPal <- colorNumeric(colors, mapPredVals_Ac, na.color = 'transparent', reverse = TRUE)
rasPal <- colorNumeric(colors, mapPredVals_Ac, na.color = 'transparent', reverse = TRUE)

leaflet(
  # options = leafletOptions(crs = leafletCRS("L.CRS.EPSG4326"))
        ) %>% 
 addProviderTiles(providers$Esri.WorldTopoMap) %>%
addRasterImage(x = test,
              # fillColor = "darkgreen",
               colors = rasPal,
              # weight = 1.5,
              # opacity = 0.6
              ) %>%
  addLegend_decreasing("bottomleft", pal = numPal, values = mapPredVals_Ac, title = "Accessibility Score") %>%
  addPolygons(data = lpnf_boundary, fill = FALSE,
              weight = 2, color = "darkgreen", opacity = 0.7)
```

