---
title: "Calculating Distances from Trails & Roads"
---

This notebook calculates the minimum distance between each raster cell in the LPNF and a road or trail for use in creating the survey site accessibility index.

## Setup

```{r setup}
# load necessary packages (note: this file is intended to be run before the accessibility_setup.R script, as the outputs saved from this file (distance rasters) are read in within that script)
library(tidyverse)
library(here)
library(janitor) # for data cleaning
library(leaflet) # for plotting (optional)

# for geospatial operations, manipulation, distance calculations
library(sf)
library(terra)
library(stars)
library(ggspatial) 
library(gdistance)
```


Read in cleaned trails & roads data 

- data was cleaned in the `data_cleaning/trails_and_roads` folder `trails_and_roads.qmd` notebook, and outputs were written to the `clean_data` folder


```{r t-n-r-data}
# ------------------- Forest Watch -------------------------

# Trails (South Only)
forest_trails_south <- st_read(here("~/../../capstone/milkweedmod/clean_data/trails_and_roads/forest_watch/forest_open_trails_south.shp")) # note: this file contains trails that have been filtered to "OPEN" status

# Roads (South Only)
forest_roads_south <- st_read(here("~/../../capstone/milkweedmod/clean_data/trails_and_roads/forest_watch/forest_open_roads_south.shp")) # note: this file contains roads that have been filtered to "OPEN" status

# ---------------------- USGS -----------------------------

# ........... Trails ................

# North
usgs_trails_north <- st_read(here("~/../../capstone/milkweedmod/clean_data/trails_and_roads/usgs/usgs_trails_north.shp"))

# South
# uncomment this line and use this object if you want to use the USGS data instead of the Forest Watch data for the southern portion of the LPNF
# usgs_trails_south <- st_read(here("~/../../capstone/milkweedmod/clean_data/trails_and_roads/usgs/usgs_trails_south.shp"))

# ............. Roads .................

# North
usgs_roads_north <- st_read(here("~/../../capstone/milkweedmod/clean_data/trails_and_roads/usgs/usgs_roads_north.shp"))


# South 
# uncomment this line and use this object if you want to use the USGS data instead of the Forest Watch data for the southern portion of the LPNF
# usgs_roads_south <- st_read(here("~/../../capstone/milkweedmod/clean_data/trails_and_roads/usgs/usgs_roads_north.shp"))

```

Read in Model Raster (used as template raster for distance calculations)


```{r model-raster-tif}

# -------- Model raster ---------------------------
# We'll read in a .tif of the species distribution model output 
# to use as a template when we convert our shapefiles into rasters

# the template needs to be a stars object when we rasterize with st_rasterize(), 
stars_temp_raster <- stars::read_stars(here("~/../../capstone/milkweedmod/clean_data/site_accessibility/template_raster.tif"))

# we also need it as a SpatRaster (terra), to perform reclassification 
model_spat_raster_template <- terra::rast(here("~/../../capstone/milkweedmod/clean_data/site_accessibility/template_raster.tif"))

# and as a RasterLayer (raster), to extract points in our distance calculation steps
#model_raster_layer <- raster::raster(here::here("~/../../capstone/milkweedmod/outputs/sdm_outputs/californica_bioclim_canopy_dem.tif")) 

# optional data exploration/visualization
# plot(model_spat_raster)
# head(trails_and_roads)
# st_crs(model_raster_layer)

# ------ LPNF boundary shapefiles ---------
# Southern region (buffered)
lpnf_boundary_south <- st_read(here("~/../../capstone/milkweedmod/clean_data/lpnf_boundary/lpnf_boundary_south_buffered/lpnf_boundary_south_buffered.shp"))

# Northern region (buffered)
lpnf_boundary_north <- st_read(here("~/../../capstone/milkweedmod/clean_data/lpnf_boundary/lpnf_boundary_north_buffered/lpnf_boundary_north_buffered.shp")) 


# Check: Coordinate Reference System (CRS) of all objects need to match (they should already, since all objects are cleaned data products):
print("The CRS of the model raster and the Forest Watch Trails & Roads data match:")
st_crs(stars_temp_raster) == st_crs(forest_trails_south) & st_crs(forest_trails_south) == st_crs(forest_roads_south)

print("The CRS of the model raster and the USGS Trails & Roads data match:")
st_crs(stars_temp_raster) == st_crs(usgs_roads_north) & st_crs(usgs_roads_north) == st_crs(usgs_trails_north)

print("The CRS of the model raster and the LPNF boundaries data match:")
st_crs(stars_temp_raster) == st_crs(lpnf_boundary_north) & st_crs(stars_temp_raster) == st_crs(lpnf_boundary_south)
```

Note: Come back and replace model template with template that Amanda and I create

nrow(raster) 389 rows 544 columns (wow!)

## Raster Template

We'll want to mask the model raster template to the northern and southern regions of the LPNF before we run any distance calculations. We'll use the RasterLayer (`terra`) for this and the `terra::mask()` function (note: `{raster}` also has a `mask()` function.

```{r}
# Mask template ----
# mask this template area to the southern and northern regions of the LPNF (separately, which further helps to speed up distance calculations)

model_template_south <- mask(model_spat_raster_template, # keep values in this raster when
                             lpnf_boundary_south) # covered by this mask

model_template_north <- mask(model_spat_raster_template, # keep values in this raster when
                             lpnf_boundary_north) # covered by this mask

# optional: plot to see output of these steps (should be two rasters where values of northern and southern regions are 0 and extent for entire area is preserved from original template raster)
plot(model_template_south)
plot(model_template_north)

```

```{r}
#terra_points_north <- terra::extract(model_template_north, xy = TRUE)
```


### Extract points 

We're trying to calculate the distance from the centroid of each raster cell to the nearest trail and road.
To do this, we'll first extract points from the centroids of all raster cells in a RasterLayer as SpatialPoints. 

We will calculate distance using `st_distance()`, so we'll also need to convert the SpatialPoints DataFrame to a simple feature (`sf`) object.

```{r}

# Mask template raster to north and south ----

# mask model raster layer to southern...
raster_layer_south <- raster::raster(model_template_south)
# and northern regions
raster_layer_north <- raster::raster(model_template_north)


# Extract points from RasterLayer, turn into SpatialPointsDataFrame ----
# convert raster to Points (centroids of raster cells)
spatial_points_south <- raster::rasterToPoints(raster_layer_south,
                                               spatial = TRUE)

spatial_points_north <- raster::rasterToPoints(raster_layer_north,
                                               spatial = TRUE)

# convert centroids points to sf object ----

# performing this step for masked southern region points
centroid_points_south <- st_as_sf(spatial_points_south, coords = c("x", "y")) %>% 
  st_transform(crs = st_crs(lpnf_boundary_south)) # keep in the same CRS: EPSG 4326

centroid_points_north <- st_as_sf(spatial_points_north, coords = c("x", "y")) %>% 
  st_transform(crs = st_crs(lpnf_boundary_north)) # keep in the same CRS: EPSG 4326

# check that CRS match between raster template and forest watch / USGS roads data
st_crs(centroid_points_south) == st_crs(forest_roads_south) # returns TRUE

st_crs(centroid_points_north) == st_crs(usgs_roads_north) # returns TRUE


```

## Calculate Distance

We will first calculate the distance from these centroid points to all lines in the roads and trails subsets (USGS for northern region, Forest watch for southern region) using `st_distance`: 

```{r}
# =========== Calculate distances =========================
# calculate distances between all raster cell centroids and every line (trail or road) in the multilinestring sf dataframe object (roads_prep, trails_prep), then convert to data frame, where each row represents a point (centroid of raster cell) and columns represent the distance to every road (multilinestring in the roads_prep data set)

# Note: These will all take a while (can take several mintues+ depending on your system. I've included my system time for a sanity check)


# SOUTHERN REGION ----------------

# Distance from Roads
system.time(
distance_to_roads_south <- st_distance(centroid_points_south, forest_roads_south) %>% 
  data.frame() # convert to data frame to store distance calculations, used in algebraic operation later
)
# here's how long it took for me:
#   user  system elapsed 
# 63.822   0.647  64.175 

# Distance from Trails
system.time(
distance_to_trails_south <- st_distance(centroid_points_south, forest_trails_south) %>% 
  data.frame()
)
#   user  system elapsed 
# 155.120   1.805 156.217 



# NORTHERN REGION ----------------
# these should be a bit faster, as the northern region is smaller than the southern region.

# Distance from Roads
system.time(
distance_to_roads_north <- st_distance(centroid_points_north, usgs_roads_north) %>% 
  data.frame() # convert to data frame to store distance calculations, used in algebraic operation later
)
# here's how long it took for me:
#     user  system elapsed 
# 11.530   0.140  11.644 

# Distance from Trails
system.time(
distance_to_trails_north <- st_distance(centroid_points_north, usgs_trails_north) %>% 
  data.frame()
)
#   user  system elapsed 
#  5.949   0.031   5.969 

```


### Find distance to nearest line, select minimum distance, save as data frame

Now we'll use the distances dataframe created in the code chunk above find the minimum distance to a road or trail from the centroid of each raster cell. We'll then bind those minimum values with the centroid points from our raster template and save that output as a data frame, so each row represents a raster cell centroid and associated geometry, as well as the geometric identity of that raster cell (where it belongs in the template).

```{r}

# ========== Find nearest line ===================

# ----------------- South --------------------------
# for each point (row), take the minimum value, which represents the distance to the nearest road or trail
nearest_road_south <- apply(distance_to_roads_south, 
                       MARGIN = 1, # margin, 1 = rows
                       FUN = min # function we're applying
                       ) %>% 
  data.frame() # save output (distance to nearest road) as data frame


nearest_trail_south <- apply(distance_to_trails_south, 
                       MARGIN = 1, # margin, 1 = rows
                       FUN = min # function we're applying
                       ) %>% 
  data.frame() # save output (distance to nearest trail) as data frame

# ----------------- North --------------------------
nearest_road_north <- apply(distance_to_roads_north, 
                       MARGIN = 1, # margin, 1 = rows
                       FUN = min # function we're applying
                       ) %>% 
  data.frame() # save output (distance to nearest road) as data frame


nearest_trail_north <- apply(distance_to_trails_north, 
                       MARGIN = 1, # margin, 1 = rows
                       FUN = min # function we're applying
                       ) %>% 
  data.frame() # save output (distance to nearest trail) as data frame


# ======= Join distances and geometries ======================= 

#  ---------------- South -------------------

# bringing geometry column in, saving minimum distance to road as an sf object
nearest_road_geom_south <- bind_cols(centroid_points_south, nearest_road_south)

# bringing geometry column in, saving minimum distance to trail as an sf object
nearest_trail_geom_south <- bind_cols(centroid_points_south, nearest_trail_south)

#  ---------------- North -------------------

# bringing geometry column in, saving minimum distance to road as an sf object
nearest_road_geom_north <- bind_cols(centroid_points_north, nearest_road_north)

# bringing geometry column in, saving minimum distance to trail as an sf object
nearest_trail_geom_north <- bind_cols(centroid_points_north, nearest_trail_north)


# ============== Rename & Select Relevant Columns =============================

# -------------------------- South --------------------------------------------

# renaming distance column, removing irrelevant column from sf data frame
road_distance_sf_south <- nearest_road_geom_south %>% 
  # in the format newname = oldname
  rename(distance = ".") %>% 
  dplyr::select(-"lyr.1") # deselecting the inherited column of 0s from our template raster

# if you view the output of this table
#head(road_distance_sf_south) # you should see a table with two columns:
# "distance" (contains values representing the distance to the nearest road (in meters) from each raster cell
# and "geometry" (contains the geometry associated with each raster cell centroid)

# renaming distance column, removing irrelevant column from sf data frame
trail_distance_sf_south <- nearest_trail_geom_south %>% 
  rename(distance = ".") %>% 
  dplyr::select(-"lyr.1") # deselecting the inherited column of 0s from our template raster

# -------------------------- North --------------------------------------------

# renaming distance column, removing irrelevant column from sf data frame
road_distance_sf_north <- nearest_road_geom_north %>% 
  # in the format newname = oldname
  rename(distance = ".") %>% 
  dplyr::select(-"lyr.1") # deselecting the inherited column of 0s from our template raster

# renaming distance column, removing irrelevant column from sf data frame
trail_distance_sf_north <- nearest_trail_geom_north %>% 
  rename(distance = ".") %>% 
  dplyr::select(-"lyr.1") # deselecting the inherited column of 0s from our template raster

# uncomment to see a very preliminary plot of what this data looks like
#plot(road_distance_sf_north)


```


## Rasterize distance calculations


Now we'll make a raster of the distance from each point (centroid of a raster cell, which came from the model output raster we used as a template) to the nearest line (trail or road).

When we rasterize, we'll be using the `stars` object version of our template raster, called `stars_temp_raster` within `st_rasterize()`


Using stars

```{r}

# ================ South ==================================
# roads ----
# rasterize sf data frame, then convert to SpatRaster
road_south_raster <- st_rasterize(road_distance_sf_south,
                                 template = stars_temp_raster) %>% # using stars template raster
  terra::rast() # convert to SpatRaster

# trails ----
# rasterize sf data frame, then convert to SpatRaster
trail_south_raster <- st_rasterize(trail_distance_sf_south,
                                 template = stars_temp_raster) %>% 
  terra::rast() # convert to SpatRaster



# ================ North =======================================

# roads ----
# rasterize sf data frame, then convert to SpatRaster
road_north_raster <- st_rasterize(road_distance_sf_north,
                                 template = stars_temp_raster) %>% 
  rast() # convert to SpatRaster

# trails ----
# rasterize sf data frame, then convert to SpatRaster
trail_north_raster <- st_rasterize(trail_distance_sf_north,
                                 template = stars_temp_raster) %>% 
  rast() # convert to SpatRaster


# plot to check the output of this step
plot(road_north_raster)
plot(trail_north_raster)

plot(road_south_raster)
plot(trail_south_raster)
# note: there seems to be a vertical line through the southern region?
# distances are in meters (on legend)

# check that everything is in the same CRS:

st_crs(road_north_raster) == st_crs(road_south_raster)
st_crs(trail_north_raster) == st_crs(trail_south_raster)

```



## Combine as one raster layer (north + south)

Crop & Merge

```{r}

# =========== trails ================
# crop trails raster (north)
trail_north_crop <- mask(trail_north_raster, # keep the values of this raster
                           lpnf_boundary_north) # where cells are covered by this "mask" 


# crop trails raster (south)
trail_south_crop <- mask(trail_south_raster, # keep the values of this raster
                           lpnf_boundary_south) # where cells are covered by this "mask" 


# =========== roads ================

# crop roads raster (north)
road_north_crop <- mask(road_north_raster,
                            lpnf_boundary_north)


# crop roads raster (north)
road_south_crop <- mask(road_south_raster,
                            lpnf_boundary_south)


# ============== Merge ====================================
# merge trails
trails_merge <- terra::merge(trail_north_crop, trail_south_crop)

# merge roads
roads_merge <- terra::merge(road_north_crop, road_south_crop)

# Plot output to check
plot(trails_merge)
plot(roads_merge)

```

## Save output to outputs folder

```{r}
#terra::writeRaster(trails_merge, here::here("~/../../capstone/milkweedmod/clean_data/site_accessibility/trails_distance_raster.tif"), overwrite = TRUE)
#terra::writeRaster(roads_merge, here::here("~/../../capstone/milkweedmod/clean_data/site_accessibility/roads_distance_raster.tif"), overwrite = TRUE)

```







## Rescale (no need to run this since it's in the rescale_all_layers notebook)

We'll first crop our distance raster to the southern region of the LPNF, then rescale our distances to fit from 0 to 1, with an added step (1 - rescaling) to ensure that 1 indicates high physical accessibility (closer to trails, roads) and 0 indicates low physical accessibility (farther away from trails, roads).


```{r}
# =========== Rescale ============================
# rescale each raster of distance to roads and trails from 0 to 1:

# first, compute min and max
min_max_road <- minmax(roads_merge) 
min_max_trail <- minmax(trails_merge) 
# returns min and max matrix with min distance in row 1, max as row 2

# rescale: 
# for every raster cell:
# 1 - (subtract min value from distance, divide by (max - min)) 
# so that 1 is closest, 0 is farthest 
road_dist_rescaled <- 1 - ((roads_merge - min_max_road[1,]) / (min_max_road[2,] - min_max_road[1,]))

# perform same rescaling for trails
trail_dist_rescaled <- 1 - ((trails_merge - min_max_trail[1,]) / (min_max_trail[2,] - min_max_trail[1,]))

# plot to check
plot(road_dist_rescaled)
plot(trail_dist_rescaled)
```

# COME BACK: REMOVE THIS OR ASK IN WORK SESSION
```{r, eval=FALSE}
# SCRAPPED --------- MAPS REVERSE, NOT WANTED ----------------
source(here("R", "addLegend_decreasing.R"))
lpnf_boundary <- st_read(here("~/../../capstone/milkweedmod/clean_data/lpnf_boundary/lpnf_boundary/lpnf_boundary.shp"),
                         quiet = TRUE)

mapPredVals_Ac <- wallace::getRasterVals(road_dist_rescaled)

colors <- c("#2c7bb6", "#abd9e9", "#ffffbf", "#fdae61", "#d7191c")

numPal <- colorNumeric(colors, mapPredVals_Ac, na.color = 'transparent', reverse = FALSE)
rasPal <- colorNumeric(colors, mapPredVals_Ac, na.color = 'transparent', reverse = FALSE)

leaflet(
  # options = leafletOptions(crs = leafletCRS("L.CRS.EPSG4326"))
        ) %>% 
 addProviderTiles(providers$Esri.WorldTopoMap) %>%
addRasterImage(x = road_dist_rescaled,
              # fillColor = "darkgreen",
               colors = rasPal,
              # weight = 1.5,
              # opacity = 0.6
              ) %>%
  addLegend_decreasing("bottomleft", pal = numPal, values = mapPredVals_Ac, title = "Accessibility Score") %>%
  addPolygons(data = lpnf_boundary, fill = FALSE,
              weight = 2, color = "darkgreen", opacity = 0.7)

```




